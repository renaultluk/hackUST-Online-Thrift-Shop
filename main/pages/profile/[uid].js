import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Image from 'next/image';
import { useAuth } from "../../utils/AuthContext";
import { firestore } from '../../utils/firebase';
import { doc, getDoc, collection, query, where, getDocs } from "firebase/firestore";
import styles from "../../styles/profile.module.css";
import { Container, Row, Col, Button, Card } from "react-bootstrap";
import { getDateString } from '../../utils/utils';
import Head from 'next/head'
import { donationRewards } from '../../utils/CalculationUtils';
import { pdf, PDFDownloadLink, PDFViewer } from '@react-pdf/renderer'
import IndividualShippingLabel from '../../components/IndividualShippingLabel'

import { FaFileDownload } from 'react-icons/fa'

const UserProfile = () => {

    const [ userData, setUserData ] = useState(null);
    const [ ordersData, setOrdersData ] = useState (null);
    const [ donationsData, setDonationsData ] = useState (null);
    const [ activeTab, setActiveTab ] = useState(0)

    const { loadingUser, currentUser, logout } = useAuth();
    const router = useRouter();
    const { uid } = router.query

    const tabs = ['Account Info', 'Thriftee Dollars', 'Orders'];

    const getUserData = async () => {
        const docRef = doc(firestore, "users", uid);
        const docSnap = await getDoc(docRef)
        if (docSnap.exists()) {
            setUserData(docSnap.data());
          } else {
            setUserData(null);
        }
    }

    const changeTabs = (e) => {
        setActiveTab(e.target.id);
    }

    const getUserPurchases = async () => {
        const ordersRef = collection(firestore, 'orders');
        const q = query(ordersRef, where("userId", "==", userData.uid));

        const querySnapshot = await getDocs(q);
        let fetchedOrders = [];

        querySnapshot.forEach(doc=>{
            fetchedOrders.push(doc.data());
        })
        setOrdersData(fetchedOrders);
    }

    const getUserDonations = async () => {
        const ordersRef = collection(firestore, 'donations');
        const q = query(ordersRef, where("userId", "==", userData.uid));

        const querySnapshot = await getDocs(q);
        let fetchedDonations = [];

        querySnapshot.forEach(doc=>{
            fetchedDonations.push(doc.data());
        })
        setDonationsData(fetchedDonations);
    }

    useEffect(() => {
        if (!loadingUser && !currentUser){
            router.push('/login')        
        }else if (!loadingUser && currentUser){
            getUserData()
        }
    }, [currentUser])

    useEffect( ()=>{
        if (userData){
            getUserPurchases();
            getUserDonations();
        }

    }, [userData, activeTab])


    const userEcoPoints = donationsData?.reduce((acc, curr) => acc + Number(curr.estimatedRewards), 0)

    return (
        <> 
        <Head>
            <title>Thriftee | {userData?.displayName}</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        
        { userData &&
            <div className={styles.outerContaienr}>
                <div className={styles.greetingsContainer}>
                    <div className={styles.greetingsLeft}>
                        <h2 className={styles.hello}>Hello</h2>
                        <h1 className={styles.name}> {userData?.displayName} </h1>
                    </div>
                    <div className={styles.greetingsRight}>
                        <img className={styles.qrCode} src={userData?.photoURL}/>
                    </div>
                </div>

                <div className={styles.tabContainer}>
                    {
                        tabs.map((tab, i)=>{
                            return <button className={activeTab == i ? styles.activeTabButton : styles.tabButtons} id={i} key={i} onClick={changeTabs}>
                                {tab}
                            </button>
                        })
                    }
                </div>
                
                <div className={styles.contentTabContainer}>
                {(activeTab == 0) &&

                    <div className={styles.contentInfoContainer}>
                        <label className={styles.infoLabel}>Full Name</label>
                        <p className={styles.infoData}>{userData?.displayName}</p>
                        <label className={styles.infoLabel}>Email Address</label>
                        <p className={styles.infoData}>{userData?.email}</p>
                        <label className={styles.infoLabel}>Address</label>
                        <p className={styles.infoData}>653 Brook St.
                        Winter Springs, FL 32708</p>
                        <label className={styles.infoLabel}>Saved Card</label>
                        <p className={styles.infoData}>
                            MasterCard **** **** **** 9527
                        </p>
                        <button className={styles.logout} onClick={logout}>Log Out</button>

                    </div>
                }
                {(activeTab == 1) &&

                    <div className={styles.contentInfoContainer}>
                        <p className={styles.points}> {userEcoPoints ?? 0} <span style={{fontSize:'1rem', fontWeight: 'normal', marginLeft:'1rem', paddingTop:'0.5rem'}}>Thriftee Dollars</span></p>

                        <div className={styles.donationsContainer}> 
                            <div className={styles.infoLabel}> Past Donations </div>
                            <table className={styles.donations} >
                                <tr className={styles.donationRow}>
                                    <th className={styles.donationRowLabels}>Date</th>
                                    <th className={styles.donationRowLabels}>Weight</th>
                                    <th className={styles.donationRowLabels}>Rewards</th>
                                    <th className={styles.donationRowLabels}>Label</th>
                                </tr>
                                {
                                donationsData.map((donation,i) => {
                                    return (
                                    <tr key={`donation-${i.toString()}`} className={styles.donationRow}>
                                        <td className={styles.donationRowLabels}>{getDateString(donation.donationDate?.seconds)}</td>
                                        <td className={styles.donationRowLabels}>{Number(donation.totalWeight)}kg</td>
                                        <td className={styles.donationRowLabels}>{donation.estimatedRewards}TD</td>
                                        <td className={styles.donationRowLabels}>
                                            <PDFDownloadLink document={<IndividualShippingLabel currentDonation={donation} />} fileName={`thriftee-label-${donation.donationId}.pdf`}>
                                                {({ blob, url, loading, error }) => (loading ? '...' : <FaFileDownload style={{alignSelf : 'center'}} />)}
                                            </PDFDownloadLink>
                                        </td>
                                    </tr>)
                                })
                                }

                            </table>
                        </div>
                    </div>
                }
                {(activeTab == 2) &&
                    <div className={styles.orderOuterContainer}>
                            {ordersData.map((order, idx) => {
                                return (
                                <div className={styles.orderContainer} key={`${order.orderId}`}>
                                    <div className={styles.orderImageDiv}>
                                        <img className={styles.orderImage} src={order.productsBought[0].images[0]}/>
                                    </div>
                                    <p className={styles.productBrand}>Order #{order.orderId}</p>
                                    <p className={styles.productName}>Total Spending: HK${order.totalSpending??0}</p>
                                    <p className={styles.productName}>Order Date: {getDateString(order.orderDate.seconds)}</p>
                                    <p className={styles.productName}>Delivery Date: {getDateString(order.orderDate.seconds + 1000000)}</p>
                                </div>
                                
                                )
                            })
                            }

                    </div>
                }



                </div>



            </div>
            }
        </>
    )
}

export default UserProfile
